@page "/"
@using TodoApp.Models
@using TodoApp.Services
@inject TodoService todoService

<PageTitle>Todo App</PageTitle>

<!-- ADD TASK FORM -->
<div style="margin-bottom: 30px; padding: 20px; background-color: #f8f9fa; border-radius: 5px;">
    <h3>Add New Task</h3>
    <div style="display: flex; gap: 10px;">
        <input type="text"
               class="form-control"
               placeholder="Enter task title..."
               @bind="newTaskTitle"
               @bind:event="oninput"
               style="flex: 1;" />
        <button class="btn btn-primary" @onclick="AddTask">
            Add Task
        </button>
    </div>
</div>

@if (todos == null)
{
    <p><em>Loading tasks...</em></p>
}
else if (incompleteTodos.Count == 0)
{
    <p><em>No pending tasks! You've completed everything! 🎉</em></p>
}
else
{
    <div>
        @foreach (var item in paginatedTodos)
        {
            <div style="margin-bottom: 10px; display: flex; align-items: center; gap: 10px;">
                <!-- Checkbox -->
                <input type="checkbox"
                       @bind="item.IsDone"
                       @bind:after="() => SaveTaskChanges(item)" />

                <!-- Task Title - Conditional Rendering -->
                @if (editingTaskId == item.Id)
                {
                    <!-- EDIT MODE: Show input for editing -->
                    <input type="text"
                           class="form-control"
                           @bind="item.Title"
                           @bind:event="oninput"
                           @onblur="() => FinishEditing(item)"
                           style="flex: 1;" />
                }
                else
                {
                    <!-- VIEW MODE: Show span, click to edit -->
                    <span @onclick="() => StartEditing(item.Id)"
                          style="flex: 1; cursor: pointer; padding: 5px; border-radius: 3px;"
                          title="Click to edit">
                        @item.Title
                    </span>
                }

                <!-- Delete Button -->
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTask(item.Id)">
                    Delete
                </button>
            </div>
        }
    </div>

    <!-- Pagination Controls -->
    <div style="margin-top: 20px;">
        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@isFirstPage">
            Previous
        </button>

        <span style="margin: 0 15px;">
            Page @currentPage of @totalPages (Showing @paginatedTodos.Count of @incompleteTodos.Count tasks)
        </span>

        <button class="btn btn-primary" @onclick="NextPage" disabled="@isLastPage">
            Next
        </button>
    </div>
}

@code {
    // All todos from database
    private List<TodoItem>? todos;

    // Field to store the new task title from the input
    private string newTaskTitle = string.Empty;

    // Track which task is being edited (null = no task being edited)
    private Guid? editingTaskId = null;

    // Filtered list - only incomplete tasks
    private List<TodoItem> incompleteTodos =>
        todos?.Where(t => !t.IsDone).ToList() ?? new List<TodoItem>();

    // Pagination settings - CHANGED FROM 5 TO 10
    private int currentPage = 1;
    private int pageSize = 10;

    // Calculate total pages needed
    private int totalPages =>
        (int)Math.Ceiling((double)incompleteTodos.Count / pageSize);

    // Get the current page's todos
    private List<TodoItem> paginatedTodos =>
        incompleteTodos
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

    // Check if we're on first or last page
    private bool isFirstPage => currentPage == 1;
    private bool isLastPage => currentPage >= totalPages;

    // This method runs when the page is first loaded
    protected override async Task OnInitializedAsync()
    {
        todos = await todoService.GetAllAsync();
    }

    // Navigate to previous page
    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    // Navigate to next page
    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    // Add a new task
    private async Task AddTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskTitle))
        {
            return;
        }

        await todoService.AddTaskAsync(newTaskTitle);
        todos = await todoService.GetAllAsync();
        newTaskTitle = string.Empty;
        currentPage = 1;
    }

    // Save changes to a task
    private async Task SaveTaskChanges(TodoItem item)
    {
        await todoService.UpdateTaskAsync(item);
        todos = await todoService.GetAllAsync();
    }

    // Delete a task
    private async Task DeleteTask(Guid id)
    {
        await todoService.DeleteTaskAsync(id);
        todos = await todoService.GetAllAsync();

        if (paginatedTodos.Count == 0 && currentPage > 1)
        {
            currentPage--;
        }
    }

    // Enter edit mode for a task
    private void StartEditing(Guid id)
    {
        editingTaskId = id;
    }

    // Exit edit mode and save changes
    private async Task FinishEditing(TodoItem item)
    {
        await SaveTaskChanges(item);
        editingTaskId = null;
    }
}