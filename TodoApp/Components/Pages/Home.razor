@page "/"
@using TodoApp.Models
@using TodoApp.Services
@inject TodoService todoService

<PageTitle>Home</PageTitle>

<h1>My Todo List</h1>

<!-- ADD TASK FORM -->
<div style="margin-bottom: 30px; padding: 20px; background-color: #f8f9fa; border-radius: 5px;">
    <h3>Add New Task</h3>
    <div style="display: flex; gap: 10px;">
        <input type="text"
               class="form-control"
               placeholder="Enter task title..."
               @bind="newTaskTitle"
               @bind:event="oninput"
               style="flex: 1;" />
        <button class="btn btn-primary" @onclick="AddTask">
            Add Task
        </button>
    </div>
</div>

<p>Here are all your tasks:</p>

@if (todos == null)
{
    <p><em>Loading tasks...</em></p>
}
else if (incompleteTodos.Count == 0)
{
    <p><em>No pending tasks! You've completed everything! 🎉</em></p>
}
else
{
    <div>
        @foreach (var item in paginatedTodos)
        {
            <div style="margin-bottom: 10px; display: flex; align-items: center; gap: 10px;">
                <!-- Checkbox -->
                <input type="checkbox"
                       @bind="item.IsDone"
                       @bind:after="() => SaveTaskChanges(item)" />

                <!-- Task Title -->
                <span style="flex: 1;">@item.Title</span>

                <!-- NEW: Delete Button -->
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTask(item.Id)">
                    Delete
                </button>
            </div>
        }
    </div>

    <!-- Pagination Controls -->
    <div style="margin-top: 20px;">
        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@isFirstPage">
            Previous
        </button>

        <span style="margin: 0 15px;">
            Page @currentPage of @totalPages (Showing @paginatedTodos.Count of @incompleteTodos.Count tasks)
        </span>

        <button class="btn btn-primary" @onclick="NextPage" disabled="@isLastPage">
            Next
        </button>
    </div>
}

@code {
    // All todos from database
    private List<TodoItem>? todos;

    // Field to store the new task title from the input
    private string newTaskTitle = string.Empty;

    // Filtered list - only incomplete tasks
    private List<TodoItem> incompleteTodos =>
        todos?.Where(t => !t.IsDone).ToList() ?? new List<TodoItem>();

    // Pagination settings
    private int currentPage = 1;
    private int pageSize = 5;

    // Calculate total pages needed
    private int totalPages =>
        (int)Math.Ceiling((double)incompleteTodos.Count / pageSize);

    // Get the current page's todos
    private List<TodoItem> paginatedTodos =>
        incompleteTodos
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

    // Check if we're on first or last page
    private bool isFirstPage => currentPage == 1;
    private bool isLastPage => currentPage >= totalPages;

    // This method runs when the page is first loaded
    protected override async Task OnInitializedAsync()
    {
        todos = await todoService.GetAllAsync();
    }

    // Navigate to previous page
    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    // Navigate to next page
    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    // Add a new task
    private async Task AddTask()
    {
        if (string.IsNullOrWhiteSpace(newTaskTitle))
        {
            return;
        }

        await todoService.AddTaskAsync(newTaskTitle);
        todos = await todoService.GetAllAsync();
        newTaskTitle = string.Empty;
        currentPage = 1;
    }

    // Save changes to a task
    private async Task SaveTaskChanges(TodoItem item)
    {
        await todoService.UpdateTaskAsync(item);
        todos = await todoService.GetAllAsync();
    }

    // NEW METHOD: Delete a task
    private async Task DeleteTask(Guid id)
    {
        // Call the service to delete the task from the database
        await todoService.DeleteTaskAsync(id);

        // Reload the list to reflect the deletion
        todos = await todoService.GetAllAsync();

        // Adjust pagination if necessary
        // If we deleted the last item on a page, go back one page
        if (paginatedTodos.Count == 0 && currentPage > 1)
        {
            currentPage--;
        }
    }
}